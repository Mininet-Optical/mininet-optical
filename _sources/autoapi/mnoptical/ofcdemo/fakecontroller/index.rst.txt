:py:mod:`mnoptical.ofcdemo.fakecontroller`
==========================================

.. py:module:: mnoptical.ofcdemo.fakecontroller

.. autoapi-nested-parse::

   fakecontroller.py: script to test REST API

   This is not intended to be a 'real' controller -
   it is an extremely simple set of proxy objects
   that make it easy to exercise the prototype
   SDN control REST API via python.

   The real controller will be ONOS, and it may use
   GNMI or Netconf rather than REST.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   mnoptical.ofcdemo.fakecontroller.Proxy
   mnoptical.ofcdemo.fakecontroller.OFSwitchProxy
   mnoptical.ofcdemo.fakecontroller.RESTProxy
   mnoptical.ofcdemo.fakecontroller.NodeProxy
   mnoptical.ofcdemo.fakecontroller.SwitchProxy
   mnoptical.ofcdemo.fakecontroller.TerminalProxy
   mnoptical.ofcdemo.fakecontroller.ROADMProxy



Functions
~~~~~~~~~

.. autoapisummary::

   mnoptical.ofcdemo.fakecontroller.fetchNodes
   mnoptical.ofcdemo.fakecontroller.fetchLinks
   mnoptical.ofcdemo.fakecontroller.fetchRules
   mnoptical.ofcdemo.fakecontroller.fetchPorts
   mnoptical.ofcdemo.fakecontroller.fetchOSNR



Attributes
~~~~~~~~~~

.. autoapisummary::

   mnoptical.ofcdemo.fakecontroller.ListenPortBase


.. py:class:: Proxy

   Bases: :py:obj:`object`

   Base proxy class

   .. py:method:: __repr__(self)

      Return repr(self).



.. py:data:: ListenPortBase
   :annotation: = 6653

   

.. py:class:: OFSwitchProxy(name, ip='127.0.0.1', port=None)

   Bases: :py:obj:`Proxy`

   Local proxy for OpenFlow switch configuration using ovs-ofctl

   .. py:attribute:: listenPort
      

      

   .. py:method:: dpctl(self, cmd, params='', verbose=False)

      Invoke ovs-ofctl to program remote switch



.. py:class:: RESTProxy(name=None, baseURL='http://localhost:8080/')

   Bases: :py:obj:`Proxy`

   Proxy for REST API objects/calls

   .. py:method:: get(self, path, params=None)

      Make a REST request



.. py:class:: NodeProxy(name=None, baseURL='http://localhost:8080/')

   Bases: :py:obj:`RESTProxy`

   Base class for switching node proxies

   .. py:method:: ports(self)

      Fetch node's switching rules if any



.. py:class:: SwitchProxy(name=None, baseURL='http://localhost:8080/')

   Bases: :py:obj:`NodeProxy`

   Base class for switching node proxies

   .. py:method:: rules(self)

      Fetch node's switching rules if any



.. py:class:: TerminalProxy(name=None, baseURL='http://localhost:8080/')

   Bases: :py:obj:`SwitchProxy`

   Local proxy for Terminal/transceiver configuration via REST

   .. py:method:: connect(self, ethPort, wdmPort, channel=None, power=None)

      Configure terminal/transceiver


   .. py:method:: reset(self)


   .. py:method:: turn_on(self)



.. py:class:: ROADMProxy(name=None, baseURL='http://localhost:8080/')

   Bases: :py:obj:`SwitchProxy`

   Local proxy for ROADM configuration via REST

   .. py:method:: connect(self, port1, port2, channels, action='install')

      Configure ROADM


   .. py:method:: reset(self)



.. py:function:: fetchNodes(net)

   Fetch node list using REST


.. py:function:: fetchLinks(net)


.. py:function:: fetchRules(roadms)

   Fetch ROADM rules using REST


.. py:function:: fetchPorts(net, nodes)

   Fetch ports for all nodes


.. py:function:: fetchOSNR(net)

   Fetch OSNR values


