:py:mod:`mnoptical.ofcdemo.Demo_Control`
========================================

.. py:module:: mnoptical.ofcdemo.Demo_Control

.. autoapi-nested-parse::

   single_link_test.py: test monitoring on a single link

   Note this version uses and depends on explicit port assignment!



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   mnoptical.ofcdemo.Demo_Control.init_Controller
   mnoptical.ofcdemo.Demo_Control.Span
   mnoptical.ofcdemo.Demo_Control.RoadmPhyNetwork
   mnoptical.ofcdemo.Demo_Control.Mininet_installPath
   mnoptical.ofcdemo.Demo_Control.Mininet_uninstallPath
   mnoptical.ofcdemo.Demo_Control.Mininet_setupLightpath
   mnoptical.ofcdemo.Demo_Control.Mininet_teardownLightpath
   mnoptical.ofcdemo.Demo_Control.Mininet_monitorLightpath
   mnoptical.ofcdemo.Demo_Control.Lumentum_installPath
   mnoptical.ofcdemo.Demo_Control.Lumentum_uninstallPath
   mnoptical.ofcdemo.Demo_Control.Lumentum_setupLightpath
   mnoptical.ofcdemo.Demo_Control.Lumentum_teardownLightpath
   mnoptical.ofcdemo.Demo_Control.Lumentum_MonitorLightpath
   mnoptical.ofcdemo.Demo_Control.linkspec
   mnoptical.ofcdemo.Demo_Control.getLinks
   mnoptical.ofcdemo.Demo_Control.netGraph
   mnoptical.ofcdemo.Demo_Control.FindRoute
   mnoptical.ofcdemo.Demo_Control.waveAvailibility
   mnoptical.ofcdemo.Demo_Control.waveSelection
   mnoptical.ofcdemo.Demo_Control.install_Lightpath
   mnoptical.ofcdemo.Demo_Control.check_lightpath_for_traf
   mnoptical.ofcdemo.Demo_Control.update_lightpath_down_time
   mnoptical.ofcdemo.Demo_Control.traf_to_lightpah_Assignment
   mnoptical.ofcdemo.Demo_Control.install_Traf
   mnoptical.ofcdemo.Demo_Control.uninstall_Lightpath
   mnoptical.ofcdemo.Demo_Control.traf_to_lightpath_Release
   mnoptical.ofcdemo.Demo_Control.trafficPattern
   mnoptical.ofcdemo.Demo_Control.TrafficTest
   mnoptical.ofcdemo.Demo_Control.testMininet



Attributes
~~~~~~~~~~

.. autoapisummary::

   mnoptical.ofcdemo.Demo_Control.m
   mnoptical.ofcdemo.Demo_Control.Controller_Lum
   mnoptical.ofcdemo.Demo_Control.Controller_Mininet
   mnoptical.ofcdemo.Demo_Control.NUM_WAV
   mnoptical.ofcdemo.Demo_Control.LINK_CAP
   mnoptical.ofcdemo.Demo_Control.DOWN_LINK_CAP
   mnoptical.ofcdemo.Demo_Control.CPRI_CAP
   mnoptical.ofcdemo.Demo_Control.NETLINKS
   mnoptical.ofcdemo.Demo_Control.GRAPH
   mnoptical.ofcdemo.Demo_Control.NODES
   mnoptical.ofcdemo.Demo_Control.NETLINK_INFO
   mnoptical.ofcdemo.Demo_Control.TRAFFIC_INFO
   mnoptical.ofcdemo.Demo_Control.LIGHTPATH_INFO
   mnoptical.ofcdemo.Demo_Control.SRC_DST_TO_LIGHTPATH
   mnoptical.ofcdemo.Demo_Control.PATH_CH_TO_LIGHTPATH
   mnoptical.ofcdemo.Demo_Control.TRAFFIC_ID
   mnoptical.ofcdemo.Demo_Control.LIGHTPATH_ID
   mnoptical.ofcdemo.Demo_Control.NUM_NODE
   mnoptical.ofcdemo.Demo_Control.NAME_ROADM
   mnoptical.ofcdemo.Demo_Control.UP_TRAF_TIME_LIST
   mnoptical.ofcdemo.Demo_Control.UP_TRAF_ID_SET
   mnoptical.ofcdemo.Demo_Control.UP_LIGHTPATH_TIME_LIST
   mnoptical.ofcdemo.Demo_Control.UP_LIGHTPATH_ID_SET
   mnoptical.ofcdemo.Demo_Control.ALL_CHANNELS
   mnoptical.ofcdemo.Demo_Control.RU_ROADMS
   mnoptical.ofcdemo.Demo_Control.DU_ROADMS
   mnoptical.ofcdemo.Demo_Control.ROADM_TRAF
   mnoptical.ofcdemo.Demo_Control.name_roadms
   mnoptical.ofcdemo.Demo_Control.name_terminals
   mnoptical.ofcdemo.Demo_Control.ROADM_TO_TERMINAL
   mnoptical.ofcdemo.Demo_Control.TERMINAL_TO_ROADM
   mnoptical.ofcdemo.Demo_Control.ROADM_TO_ID
   mnoptical.ofcdemo.Demo_Control.TERMINAL_TO_ID
   mnoptical.ofcdemo.Demo_Control.node


.. py:data:: m
   :value: 0.001

   

.. py:data:: Controller_Lum

   

.. py:data:: Controller_Mininet

   

.. py:function:: init_Controller(Mininet_Enable=True)

   Initialize Lumentum or Mininet controller


.. py:data:: NUM_WAV
   :value: 90

   

.. py:data:: LINK_CAP
   :value: 200

   

.. py:data:: DOWN_LINK_CAP
   :value: 100

   

.. py:data:: CPRI_CAP
   :value: 25

   

.. py:data:: NETLINKS
   :value: []

   

.. py:data:: GRAPH

   

.. py:data:: NODES

   

.. py:data:: NETLINK_INFO

   

.. py:data:: TRAFFIC_INFO

   

.. py:data:: LIGHTPATH_INFO

   

.. py:data:: SRC_DST_TO_LIGHTPATH

   

.. py:data:: PATH_CH_TO_LIGHTPATH

   

.. py:data:: TRAFFIC_ID
   :value: 0

   

.. py:data:: LIGHTPATH_ID
   :value: 0

   

.. py:data:: NUM_NODE
   :value: 4

   

.. py:data:: NAME_ROADM
   :value: []

   

.. py:data:: UP_TRAF_TIME_LIST
   :value: []

   

.. py:data:: UP_TRAF_ID_SET

   

.. py:data:: UP_LIGHTPATH_TIME_LIST
   :value: []

   

.. py:data:: UP_LIGHTPATH_ID_SET

   

.. py:data:: ALL_CHANNELS

   

.. py:data:: RU_ROADMS
   :value: []

   

.. py:data:: DU_ROADMS

   

.. py:data:: ROADM_TRAF

   

.. py:data:: name_roadms
   :value: []

   

.. py:data:: name_terminals
   :value: []

   

.. py:data:: ROADM_TO_TERMINAL

   

.. py:data:: TERMINAL_TO_ROADM

   

.. py:data:: ROADM_TO_ID

   

.. py:data:: TERMINAL_TO_ID

   

.. py:data:: node

   

.. py:function:: Span(km, amp=None)

   Return a fiber segment of length km with a compensating amp


.. py:function:: RoadmPhyNetwork()

   ROADM network topo
       


.. py:function:: Mininet_installPath(lightpath_id, path, channel, power=0)

   intall switch rules on roadms along a lightpath for some signal channels


.. py:function:: Mininet_uninstallPath(lightpath_id)

   delete switch rules on roadms along a lightpath for some signal channels


.. py:function:: Mininet_setupLightpath(lightpath_id, path, channel)

   configure a lightpath 


.. py:function:: Mininet_teardownLightpath(lightpath_id)

   remove a lightpath


.. py:function:: Mininet_monitorLightpath(lightpath_id)

   monitoring a signal along a lightpath


.. py:function:: Lumentum_installPath(lightpath_id, path, channel)

   intall switch rules on roadms along a lightpath for some signal channels


.. py:function:: Lumentum_uninstallPath(lightpath_id)

   delete switch rules on roadms along a lightpath for some signal channels


.. py:function:: Lumentum_setupLightpath(lightpath_id, path, channel)

   configure a lightpath 


.. py:function:: Lumentum_teardownLightpath(lightpath_id)

   remove a lightpath


.. py:function:: Lumentum_MonitorLightpath(lightpath_id)


.. py:function:: linkspec(link)

   Return specifier dict(node1, port1, node2, port2) for link


.. py:function:: getLinks(links)


.. py:function:: netGraph(links)

   Return an adjacency dict for links


.. py:function:: FindRoute(src, graph, destinations, k=1)

   Route from src to destinations
   neighbors: adjacency list
   returns: routes dict


.. py:function:: waveAvailibility(path)


.. py:function:: waveSelection(channels)


.. py:function:: install_Lightpath(path, channel, up_time=0.0, down_time=float('inf'), Mininet=False)

   install switch rules on roadms along a lightpath for some signal channels, update control database


.. py:function:: check_lightpath_for_traf(src, dst)

   check if there are some provisioned lighpaths for CPRI traf


.. py:function:: update_lightpath_down_time(lightpath_id, down_time)

   if there is a traf, update lightpath teardown time


.. py:function:: traf_to_lightpah_Assignment(traf_id, lightpath_id, down_time=float('inf'))

   assign a traffic to a lightpath, update control database


.. py:function:: install_Traf(src, dst, routes, cur_time, down_time=float('inf'), Mininet=False)

   source RRH node to destination BBU node


.. py:function:: uninstall_Lightpath(lightpath_id, Mininet=False)

   delete switch rules on roadms along a lightpath for some signal channels


.. py:function:: traf_to_lightpath_Release(traf_id)


.. py:function:: trafficPattern(pattern, time)

   24 hour normalized traffic
   resident area: 40% resident, 20% entertainment, 18% office, 22% transport
   office area: 37% office, 18% entertainment, 16% resident, 29% transport
   entertainment area: 39% entertainment, 23% office, 11% resident, 28% transport

   (1) 24.33 Gbps CPRI OPTION 10 -> 1.5 Gbps
   (2) 9600 towers, Maximum wireless traffic is 8.5 * 10**11 bytes/ 10 mins -> 6.8*10**12 bit -> 6800 G/ 10 min = 11.3 Gbps
   -> 183.8 Gbps CPRI OPTION 10
   (3) Max traffic: 8 requests per second for CPRI OPTION 8


.. py:function:: TrafficTest(Mininet_Enable=False)


.. py:function:: testMininet()


